# def f(x, y):
#     if x > y:
#         return 0
#     if x == y:
#         return 1
#     if x < y:
#         return f(x + 1, y) + f(x * 2, y) + f(x * 2 + 1, y)
#
#
# print(f(2, 16))

# def f(x, y):
#     if x > y or x == 8:
#         return 0
#     if x == y:
#         return 1
#     if x < y:
#         return f(x + 1, y) + f(x * 2, y)
#
#
# print(f(2, 20) * f(20, 40))


# def f(x, y, cntr):
#     if x > y or cntr > 6:
#         return 0
#     if x == y and cntr <= 6:
#         return 1
#     if x < y:
#         return f(x + 1, y, cntr + 1) + f(x + 2, y, cntr + 1) + f(x * 2, y, cntr + 1)
#
# print(f(1, 20, 0))
#
# from functools import lru_cache
# @lru_cache(None)
# def f(x, k):
#     global kmin
#     if x == 227:
#         if k < kmin:
#             kmin = k
#     if x * 3 <= 227:
#         f(x * 3, k + 1)
#     if x + 5 <= 227:
#         f(x + 5, k + 1)
#     if x + 1 <= 227:
#         f(x + 1, k + 1)
#
#
# kmin = 10000
# f(1, 0)
# print(kmin)

# from functools import lru_cache
# @lru_cache(None)
# def f(x, k):
#     global kmin
#     if x == 227:
#         if k < kmin:
#             kmin = k
#     if x + 1 <= 227:
#         f(x + 1, k + 1)
#     if x + 5 <= 227:
#         f(x + 5, k + 1)
#     if x * 3 <= 227:
#         f(x * 3, k + 1)
#
#
# kmin = 10 ** 100
# f(1, 0)
# print(kmin)

# def f(x, y, cntr):
#     if x > y or cntr > 6:
#         return 0
#     if x == y and cntr <= 6:
#         return 1
#     if x < y:
#         return f(x + 1, y,cntr + 1) + f(x + 2, y, cntr + 1) + f(x * 2, y, cntr + 1)
#
# a = []
# for i in range(34, 60):
#     if f(1, i, 0) > 0:
#         a.append(f(1, i, 0))
# print(a)
# print(len(a))

# def f(x, y):
#     global cntr
#     if x == y:
#         cntr += 1
#     if x + 1 <= y:
#         f(x + 1, y)
#     if 10 <= x < 90:
#         f(x + 10, y)
#
# cntr = 0
# f(10, 33)
# print(cntr)

# def f(x, y, k):
#     if x > y or k > 7:
#         return 0
#     if x == y and k == 7:
#         return 1
#     if x < y:
#         return f(x + 1, y, k + 1) + f(x + 2, y, k + 1) + f(x + 3, y, k + 1)
#
# print(f(3, 22, 0))

# def f(x, y, k):
#     if x > y or k >= 9:
#         return 0
#     if x == y and k <= 8:
#         return 1
#     if x < y:
#         return f(x + 1, y, k + 1) + f(x + 5, y, k + 1) + f(x * 3, y, k + 1)
#
# ans = []
# for i in range(1000, 1025):
#     if f(1, i, 0) > 0:
#         ans.append(f(1, i, 0))
# print(ans)

# from functools import lru_cache
# import sys
#
# sys.setrecursionlimit(10000)
#
#
# @lru_cache(None)
# def f(x, y, k):
#     if x > y:
#         return 0
#     if x == y:
#         return 1
#     if x < y:
#         return f(x + 2, y, k + 1) + f(x + 4, y, k + 1) + f(x + 5, y, k + 1)
#
#
# for i in range(32, 100):
#     print(f(31, i, 0), i)
# from functools import lru_cache
# @lru_cache(None)
# def f(x, y):
#     if x > y or x == 12:
#         return 0
#     if x == y:
#         return 1
#     if x < y:
#         last = x
#         return f(x + 1, y) + f(x * 2, y)
#
#
# print(f(3, 18) * f(18, 55))
# def f(x, y, k):
#     if x > y or k > 6:
#         return 0
#     if x == y:
#         if k == 6:
#             return 1
#     k += 1
#     return f(x + 1, y, k) + f(x + 2, y, k) + f(x * 2, y, k)
#
# print(f(1, 20, 0))

# with open('3-3.txt') as file:
#     s = file.readline()
# c = 0
# for i in range(len(s) - 5):
#     h = s[i] + s[i + 1] + s[i + 2] + s[i + 3] + s[i + 4] + s[i + 5]
#     if 'CAB' in h and h != 'CABDEF':
#         c += 1
# print(c)
# s = s.replace('CABDEF', ' ')
# c1, c2, c3 = 0, 0, 0
# for i in range(len(s) - 2):
#     if s[i] + s[i + 1] + s[i + 2] == 'CAB':
#         c1 += 1
# for i in range(1, len(s) - 2):
#     if s[i] + s[i + 1] + s[i + 2] == 'CAB':
#         c2 += 1
# for i in range(2, len(s) - 2):
#     if s[i] + s[i + 1] + s[i + 2] == 'CAB':
#         c3 += 1
# print(max(c1, c2, c3))
# print(c1, c2, c3)
# print(s.count('CAB'))
#
# with open('3-3 (2).txt') as file:
#     s = file.readline()
# k = 0
# for i in range(len(s) - 9): #10
#     if s[i] == 'B' and s[i + 9] == 'D':
#         k += 1
# for i in range(len(s) - 10):#11
#     if s[i] == 'B' and s[i + 10] == 'D':
#         k += 1
# for i in range(len(s) - 11): #12
#     if s[i] == 'B' and s[i + 11] == 'D':
#         k += 1
# print(k)

# with open('P1 (1).txt') as file:
#     s = file.readline()
# ans = []
# str_ = s[0]
# for i in range(len(s) - 1):
#     if s[i] == s[i + 1]:
#         str_ += s[i + 1]
#     else:
#         ans.append(str_)
#         str_ = s[i + 1]
# ans = [c for c in ans if len(c) == 7]
# print(ans)

# with open('P4 (1).txt') as file:
#     s = file.readline()
# c = 1
# max_c = -10 ** 10
# for i in range(len(s) - 1):
#     if s[i] > s[i + 1]:
#         c += 1
#         max_c = max(max_c, c)
#     else:
#         c = 1
# print(max_c)
#
# with open('P5 (2).txt') as file:
#     s = file.readline()
# char = s[0]
# c = 1
# ans = []
# for i in range(len(s) - 1):
#     if s[i] > s[i + 1]:
#         c += 1
#         char += s[i + 1]
#     else:
#         c = 1
#         ans.append(char)
#         char = s[i + 1]
# ans.sort(key=len)
# print(ans)

# s = ''
# print(len(s))

# with open('P6.txt') as file:
#     s = file.readline()
# print(s.count('BOSS') - (s.count('BOSSJ') + s.count('JBOSS') - s.count('JBOSSJ')))

# with open('P7.txt') as file:
#     s = file.readline()
# ans = []
# sub = s[0]
# s = s.strip()
# for i in range(len(s) - 1):
#     if int(s[i]) % 2 == 0 and int(s[i + 1]) % 2 == 0:
#         sub += s[i + 1]
#     elif int(s[i]) % 2 == 1 and int(s[i + 1]) % 2 == 1:
#         sub += s[i + 1]
#     else:
#         ans.append(sub)
#         sub = s[i + 1]
# ans.sort(key=len)
# print(ans)
# s = '066468464080080240'
# print(len(s))

with open('24_2.txt') as file:
    s = file.readline()
# s = s.replace('ad', 'a d')
# s = s.strip()
# print(max(len(c) for c in s.split()))
# ans = []
# sub = s[0]
# for i in range(len(s) - 1):
#     if s[i] + s[i + 1] != 'ad' and s[i] + s[i + 1] != 'da':
#         sub += s[i + 1]
#     else:
#         ans.append(sub)
#         sub = s[i + 1]
# print(max(len(c) for c in ans))

# with open('24_4.txt') as file:
#     s = file.readline()
# s = s.replace('NPO', '*').replace('PNO', '*')
# s = s.replace('N', ' ').replace('P', ' ').replace('O', ' ')
# print(s)
#
# s = s.strip()
# print(max(len(c) for c in s.split()))

# with open('24_7600.txt') as file:
#     s = file.readline()
# combinations = []
# for q in 'QRS':
#     for y in 'QRS':
#         combinations.append(q + y)
# max_ans = 0
# c = 1
# for i in range(len(s) - 1):
#     if (s[i] + s[i + 1]) not in combinations:
#         c += 1
#         max_ans = max(max_ans, c)
#     else:
#         c = 1
# print(max_ans)

# with open('24_7624.txt') as file:
#     s = file.readline()
# comb = []
# for x in "XYZ":
#     for y in "XYZ":
#         comb.append(x + y)
# c = 1
# max_ans = 0
# print(comb)
# for i in range(len(s) - 1):
#     if s[i] + s[i + 1] not in comb:
#         c += 1
#         max_ans = max(max_ans, c)
#     else:
#         c = 1
# print(max_ans)
from functools import lru_cache
@lru_cache(None)
def moves(h):
    return h + 1, h + 4, h * 3
@lru_cache(None)
def game(h):
    if h>=43:
        return 'W'
    if any(game(m) == 'W' for m in moves(h)):
        return 'P1'
    if all(game(m) == 'P1' for m in moves(h)):
        return 'B1'
    if any(game(m) == 'B1' for m in moves(h)):
        return 'P2'
    if all(game(m) == 'P2' or game(m) == 'P1' for m in moves(h)):
        return 'B2'

for i in range(1, 43):
    if game(i) == 'B2':
        print(i, game(i))